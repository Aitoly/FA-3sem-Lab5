
Задания к работе №5 по фундаментальным алгоритмам.

1. Разработайте класс квадратной матрицы.Ваш класс должен содержать указатель на место в памяти, где
будет располагаться матрица, имя вашей матрицы и ее размерность.В матрице хранятся числа типа double,
имя вашей матрицы — это строка символов, а размерность – целое число.
Для вашего класса перегрузите стандартные операции : +, -, *, != , == .Реализуйте необходимое число конструкторов,
при этом один из них должен принимать аргументы по умолчанию.Реализуйте дружественные методы вычисления определителя,
нахождения обратной матрицы, нахождения транспонированной матрицы, вычисление следа матрицы и матричной экспоненты
(𝑒𝐴 = 𝐸 + 𝐴 + 12𝐴2 + 13!𝐴3 + ⋯ + 1𝑛!𝐴𝑛 + ⋯).Продемонстрируйте работу с вашим классом простыми вычислениями с матрицами, например, решение СЛАУ.

Замечание.Необходимо реализовать оператор присваивания, присваивание перемещением, конструктор копий, конструктор
перемещения, деструктор.Арифметические операции необходимо реализовать с помощью соответствующих операции присваивания :
например, операция + должна быть реализована с помощью операции += .Продемонстрировать передачу аргументов в функции по
значению и по ссылке.Также необходимо продемонстрировать возврат объекта из функции.Реализуйте возможность сохранения
и восстановления ваших объектов в / из потоков.Проведите замеры производительности : выполните множественные вызовы методов,
которые принимают аргументы по значению и по ссылке при реализованном и не реализованном конструкторе перемещения
(операторе присваивания с перемещением) и выведете на экран время, которое потребовалось на выполнение этих операций.

2. На основе односвязного списка разработать класс многочлена от одной переменной и реализовать операции сложения,
вычитания, умножения, целочисленного деления и поиска остатка от деления, вычисление многочлена в заданной точке
и производной многочлена.Для демонстрации работы вашей программы реализуйте возможность обработки текстового файла
следующего вида :

Add(2x ^ 2 - x + 2, -x ^ 2 + 3x - 1); // сложить заданные многочлены

Div(x ^ 5, x ^ 2 - 1); //поделить нацело заданные многочлены

(возможны инструкции в файле Add - сложение, Sub - вычитание, Mult - умножение, Div – целочисленное деление,
	Mod – остаток от деления, Eval – вычисление многочлена в заданной точке, Diff - дифференцирование).
	При этом результаты операции выводятся на экран и в специальную переменную(сумматор) сохраняется результат
	последней операции.При этом, если в написанной инструкции отсутствует первый параметр, то это означает,
	что вместо него используется текущее значение сумматора.Например:

Mult(x ^ 2 + 3x - 1, 2x + x ^ 3);//умножить два многочлена друг на друга результат сохранить в сумматор и вывести на экран

Add(4x - 8); // в качестве первого аргумента будет взято значение из сумматора, результат будет занесен в сумматор

Eval(1);//необходимо будет взять многочлен из сумматора и для него вычислить значение в 1.

Замечание.Необходимо реализовать оператор присваивания, конструктор копий, деструктор.Арифметические операции
необходимо реализовать с помощью соответствующих операции присваивания : например, операция + должна быть реализована
с помощью операции += .Продемонстрировать передачу аргументов в функции по значению и по ссылке.Также необходимо
продемонстрировать возврат объекта из функции.Реализуйте возможность сохранения и восстановления ваших объектов в / из потоков.

3. Реализовать класс монома от нескольких переменных, содержащий̆ набор степеней, имен переменных и коэффициент.
В классе должны быть определены следующие сущности :

Конструкторы(один из которых конструктор от char* “<5 * x ^ 2y ^ 3z>”, например).
Деструктор
Методы доступа к членам класса
Перегрузить операторы : *, / , =, *=, /=
Методы корректного ввода / вывода монома на экран.

На основе вашего класса монома необходимо реализовать класс полинома от многих переменных.Ваш класс полинома представляет
собой контейнер мономов, который основан на двусвязном списке.В классе полинома необходимо реализовать операции + , -, *, == , != .

Для демонстрации работы вашей программы реализуйте возможность обработки текстового файла следующего вида :

<4x ^ 2y ^ 3 - xy ^ 2 + 4xy + 1>+<x ^ 2y ^ 3 + 2xy ^ 2 + 3x ^ 2y ^ 2 - 4xy + 5>;
<4x ^ 2y ^ 3 + 4xy + 1>* < x ^ 2y ^ 3 + 2xy ^ 2 + 3x ^ 2y ^ 2 - 4xy + 5>;
< x ^ 2y ^ 3 + 2xy ^ 2 + 3x ^ 2y ^ 2 - 4xy + 5>-<4x ^ 2y ^ 3 - xy ^ 2 + 4xy + 1>;
< x ^ 2y ^ 3 + 2xy ^ 2 >= = < x ^ 2y ^ 3 + 2xy ^ 2>;
< x ^ 2y ^ 3 + 2xy ^ 2> != < x ^ 2y ^ 3 + 2xy ^ 2>;

Замечание.Необходимо реализовать оператор присваивания, конструктор копий, деструктор.Арифметические операции необходимо
реализовать с помощью соответствующих операции присваивания : например, операция + должна быть реализована с помощью операции += .
Продемонстрировать передачу аргументов в функции по значению и по ссылке.Также необходимо продемонстрировать возврат объекта из
функции.Реализуйте возможность сохранения и восстановления ваших объектов в / из потоков.

4. Реализуйте класс большого целого числа.В вашем классе целое число должно представляться в виде динамического массива цифр
этого числа в системе счисления с основанием 𝑏𝑎𝑠𝑒.Основание системы счисления является константой
(при демонстрации необходимо показать работу программы при 𝑏𝑎𝑠𝑒 = 10𝑝, 𝑝 = 2; 4; 10).Реализуйте в вашем классе арифметические
операции : сложение, вычитание, умножение, целочисленное деление, остаток от деления и возведение в степень 𝑚(𝑚 < 𝑏𝑎𝑠𝑒).
	Операцию умножения реализуйте с использованием алгоритма Карацубы, а операцию возведения в степень с помощью быстрого
	возведения в степень.Для демонстрации работы вашего класса реализуйте :

1.) Метод перевода числа из заданной системы счисления 𝑘 в 10 - ую систему счисления;
2.) Метод перевода заданного целого числа в систему счисления с основанием 𝑘;
3.) Метод вычисления факториала целого числа;
4.) Метод вычисления биномиального коэффициента 𝐶𝑛𝑘 = 𝑛!𝑘!(𝑛−𝑘)!;
5.) Вычисление 𝑛−ого элемента последовательности Фибоначчи :

𝐹𝑛 = 𝐹𝑛−1 + 𝐹𝑛−2, 𝐹1 = 𝐹2 = 1.